missing = "ML")
summary(fit_7,
fit.measures = TRUE,
standardized = TRUE)
model_6_cor <- "France =~ Im6 + Im7 + Im8 + Im10 + Im14
Assortment =~ Im1 + Im2 + Im15 + Im16 + Im19
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
# Add residual covariances based on Modification Indices
# Add residual covariances based on Modification Indices
Im6 ~~ Im7
Im1 ~~ Im2
Im10 ~~ Im14
"
fit_6_cor <- cfa(model_6_cor,
data = Images,
missing = "ML")
fit_6_cor <- cfa(model_6_cor,
data = Images,
missing = "ML")
summary(fit_6_cor,
fit.measures = TRUE,
standardized = TRUE)
#Local Fit
std.loadings <- inspect(fit_6_cor, what="std")$lambda
check <- std.loadings
check[check>0] <- 1
std.loadings[std.loadings==0] <- NA
std.loadings2 <- std.loadings^2
std.theta<- inspect(fit_6_cor, what="std")$theta
#Individual item Reliability
IIR <- std.loadings2/(colSums(std.theta)+std.loadings2)
IIR
#Composite/Construct Reliability
sum.std.loadings<-colSums(std.loadings, na.rm=TRUE)^2
sum.std.theta<-rowSums(std.theta)
sum.std.theta=check*sum.std.theta
CR=sum.std.loadings/(sum.std.loadings+colSums(sum.std.theta))
CR
#Average Variance Extracted
std.loadings <- inspect(fit_6_cor, what="std")$lambda
std.loadings <- std.loadings^2
AVE=colSums(std.loadings)/(colSums(sum.std.theta)+colSums(std.loadings))
AVE
std_fit1 <- inspect(fit_6_cor, "std")
std_fit1$psi^2
#calculating cronbach alpha
CronFrance <- cronbach(subset(Images, select = c(Im6, Im7, Im8, Im10, Im14)))
CronFrance
CronAssortment <- cronbach(subset(Images, select = c(Im1, Im2, Im15, Im16, Im19)))
CronAssortment
CronAesthetic <- cronbach(subset(Images, select = c(Im3, Im4, Im5)))
CronAesthetic
CronQuality <- cronbach(subset(Images, select = c(Im11, Im12, Im13)))
CronQuality
CronAtmosphere <- cronbach(subset(Images, select = c(Im20, Im21, Im22)))
CronAtmosphere
model_7_cov <- "France =~ Im6 + Im7
Assortment =~ Im1 + Im2 + Im15 + Im16 + Im19
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14
# Add residual covariances based on Modification Indices
# Add residual covariances based on Modification Indices
Im1 ~~ Im2
Im16 ~~ Im19
"
fit_7_cov <- cfa(model_7_cov,
data = Images,
missing = "ML")
#calculating cronbach alpha
CronFrance <- cronbach(subset(Images, select = c(Im6, Im7, Im8, Im9)))
CronFrance
CronFood <- cronbach(subset(Images, select = c(Im10, Im14)))
CronFood
summary(fit_7_cov,
fit.measures = TRUE,
standardized = TRUE)
#Local Fit
std.loadings <- inspect(fit_7, what="std")$lambda
check <- std.loadings
check[check>0] <- 1
std.loadings[std.loadings==0] <- NA
std.loadings2 <- std.loadings^2
std.theta<- inspect(fit_7, what="std")$theta
#Individual item Reliability
IIR <- std.loadings2/(colSums(std.theta)+std.loadings2)
IIR
#Composite/Construct Reliability
sum.std.loadings<-colSums(std.loadings, na.rm=TRUE)^2
sum.std.theta<-rowSums(std.theta)
sum.std.theta=check*sum.std.theta
CR=sum.std.loadings/(sum.std.loadings+colSums(sum.std.theta))
CR
#Average Variance Extracted
std.loadings <- inspect(fit_7, what="std")$lambda
std.loadings <- std.loadings^2
AVE=colSums(std.loadings)/(colSums(sum.std.theta)+colSums(std.loadings))
AVE
std_fit1 <- inspect(fit_7, "std")
std_fit1$psi^2
model_7 <- "France =~ Im6 + Im7
Assortment =~ Im1 + Im2 + Im15 + Im16 + Im19
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14"
fit_7 <- cfa(model_7,
data = Images,
missing = "ML")
fit_7 <- cfa(model_7,
data = Images,
missing = "ML")
summary(fit_7,
fit.measures = TRUE,
standardized = TRUE)
model_7 <- "France =~ Im6 + Im7
Assortment =~ Im1 + Im2 + Im15 + Im16 + Im19
Aesthetic =~ Im3 + Im4 + Im5
Quality =~  Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14"
fit_7 <- cfa(model_7,
data = Images,
missing = "ML")
fit_7 <- cfa(model_7,
data = Images,
missing = "ML")
summary(fit_7,
fit.measures = TRUE,
standardized = TRUE)
model_7 <- "France =~ Im6 + Im7
Assortment =~ Im1 + Im2 + Im15 + Im16 + Im19
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14"
fit_7 <- cfa(model_7,
data = Images,
missing = "ML")
fit_7 <- cfa(model_7,
data = Images,
missing = "ML")
summary(fit_7,
fit.measures = TRUE,
standardized = TRUE)
model_7 <- "France =~ Im6 + Im7
Assortment =~ Im1 + Im2 + Im15
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14"
fit_7 <- cfa(model_7,
data = Images,
missing = "ML")
fit_7 <- cfa(model_7,
data = Images,
missing = "ML")
summary(fit_7,
fit.measures = TRUE,
standardized = TRUE)
modificationindices(fit_7) %>% filter(mi>100)
modificationindices(fit_7) %>% filter(mi>100)
model_7 <- "France =~ Im6 + Im7
Assortment =~ Im1 + Im2 + Im15 + Im16 + Im19
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14"
fit_7 <- cfa(model_7,
data = Images,
missing = "ML")
modificationindices(fit_7) %>% filter(mi>100)
model_7_cov <- "France =~ Im6 + Im7
Assortment =~ Im1 + Im2 + Im15 + Im16 + Im19
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14
# Add residual covariances based on Modification Indices
# Add residual covariances based on Modification Indices
Im1 ~~ Im2
Im16 ~~ Im19
"
fit_7_cov <- cfa(model_7_cov,
data = Images,
missing = "ML")
fit_7_cov <- cfa(model_7_cov,
data = Images,
missing = "ML")
summary(fit_7_cov,
fit.measures = TRUE,
standardized = TRUE)
#calculating cronbach alpha
CronFrance <- cronbach(subset(Images, select = c(Im6, Im7)))
CronFrance
CronFood <- cronbach(subset(Images, select = c(Im10, Im14)))
CronFood
#Local Fit
std.loadings <- inspect(fit_7_cov, what="std")$lambda
check <- std.loadings
check[check>0] <- 1
std.loadings[std.loadings==0] <- NA
std.loadings2 <- std.loadings^2
std.theta<- inspect(fit_7_cov, what="std")$theta
#Individual item Reliability
IIR <- std.loadings2/(colSums(std.theta)+std.loadings2)
IIR
#Composite/Construct Reliability
sum.std.loadings<-colSums(std.loadings, na.rm=TRUE)^2
sum.std.theta<-rowSums(std.theta)
sum.std.theta=check*sum.std.theta
CR=sum.std.loadings/(sum.std.loadings+colSums(sum.std.theta))
CR
#Average Variance Extracted
std.loadings <- inspect(fit_7_cov, what="std")$lambda
std.loadings <- std.loadings^2
AVE=colSums(std.loadings)/(colSums(sum.std.theta)+colSums(std.loadings))
AVE
std_fit1 <- inspect(fit_7_cov, "std")
std_fit1$psi^2
paf_8 <- fa(subset(Images), nfactors=8, rotate = "varimax") #  select 8 factors
print(paf_8$loadings, cutoff=0.3)
EigenValue <- paf_8$e.values
Variance <- EigenValue/ncol(subset(Images))*100
SumVariance <- cumsum(EigenValue/ncol(subset(Images)))
Total_Variance_Explained <- cbind(EigenValue=EigenValue[EigenValue>0],
Variance=Variance[EigenValue>0],
Total_Variance=SumVariance[EigenValue>0])
Total_Variance_Explained
sort(paf_8$communality)
model_8 <- "France =~ Im6 + Im7
Assortment =~ Im1 + Im2
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14
Professionalism =~ Im16 + Im19"
fit_8 <- cfa(model_8,
data = Images,
missing = "ML")
fit_8 <- cfa(model_8,
data = Images,
missing = "ML")
summary(fit_8,
fit.measures = TRUE,
standardized = TRUE)
std_fit_8 <- inspect(fit_8, "std")
print(paf_8$loadings, cutoff=0.3)
modificationindices(fit_8) %>% filter(mi>100)
modificationindices(fit_8) %>% filter(mi>80)
CronAssortment <- cronbach(subset(Images, select = c(Im1, Im2)))
CronAssortment
modificationindices(fit_8) %>% filter(mi>50)
modificationindices(fit_8) %>% filter(mi>10)
modificationindices(fit_8) %>% filter(mi>20)
#Local Fit
std.loadings <- inspect(fit_8, what="std")$lambda
check <- std.loadings
check[check>0] <- 1
std.loadings[std.loadings==0] <- NA
std.loadings2 <- std.loadings^2
std.theta<- inspect(fit_8, what="std")$theta
#Individual item Reliability
IIR <- std.loadings2/(colSums(std.theta)+std.loadings2)
IIR
#Composite/Construct Reliability
sum.std.loadings<-colSums(std.loadings, na.rm=TRUE)^2
sum.std.theta<-rowSums(std.theta)
sum.std.theta=check*sum.std.theta
CR=sum.std.loadings/(sum.std.loadings+colSums(sum.std.theta))
CR
#Average Variance Extracted
std.loadings <- inspect(fit_8, what="std")$lambda
std.loadings <- std.loadings^2
AVE=colSums(std.loadings)/(colSums(sum.std.theta)+colSums(std.loadings))
AVE
std_fit1 <- inspect(fit_8, "std")
std_fit1$psi^2
sem_model <- '
# Measurement Model (Loadings -  Validated)
# Measurement Model (Loadings -  Validated)
France =~ Im6 + Im7
Assortment =~ Im1 + Im2
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14
Professionalism =~ Im16 + Im19
Satisfaction =~ SAT_1 + SAT_2 + SAT_3.                    #added accordingly to the task
AffectiveCommitment =~ COM_A1 + COM_A2 + COM_A3 + COM_A4
RepurchaseIntention =~ C_REP1 + C_REP2 + C_REP3
CocreationIntention =~ C_CR1 + C_CR3 + C_CR4 # Assuming C_CR2 might be dropped
# Structural Model (Regressions)
# Structural Model (Regressions)
# Predicting Mediators (SAT and AC) from Image Factors (Paths 'a')
# Structural Model (Regressions)
# Predicting Mediators (SAT and AC) from Image Factors (Paths 'a')
Satisfaction ~ a1*France + a2*Assortment + a3*Aesthetic + a4*Quality + a5*Atmosphere + a6*Trends + a7*Food + a8*Professionalism
sem_model <- '
# Measurement Model (Loadings -  Validated)
# Measurement Model (Loadings -  Validated)
France =~ Im6 + Im7
Assortment =~ Im1 + Im2
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14
Professionalism =~ Im16 + Im19
Satisfaction =~ SAT_1 + SAT_2 + SAT_3.                    #added accordingly to the task
AffectiveCommitment =~ COM_A1 + COM_A2 + COM_A3 + COM_A4
RepurchaseIntention =~ C_REP1 + C_REP2 + C_REP3
CocreationIntention =~ C_CR1 + C_CR3 + C_CR4 # Assuming C_CR2 might be dropped
# Structural Model (Regressions)
# Structural Model (Regressions)
# Predicting Mediators (SAT and AC) from Image Factors (Paths a)
# Structural Model (Regressions)
# Predicting Mediators (SAT and AC) from Image Factors (Paths a)
Satisfaction ~ a1*France + a2*Assortment + a3*Aesthetic + a4*Quality + a5*Atmosphere + a6*Trends + a7*Food + a8*Professionalism
AffectiveCommitment ~ a9*France + a10*Assortment + a11*Aesthetic + a12*Quality + a13*Atmosphere + a14*Trends + a15*Food + a16*Professionalism
# Predicting Outcomes from Mediators (Paths b)
# Predicting Outcomes from Mediators (Paths b)
RepurchaseIntention ~ b1*Satisfaction + b2*AffectiveCommitment
CocreationIntention ~ b3*Satisfaction + b4*AffectiveCommitment
# Direct Effects from Image Factors to Outcomes (Paths c)
# Direct Effects from Image Factors to Outcomes (Paths c)
RepurchaseIntention ~ c1*France + c2*Assortment + c3*Aesthetic + c4*Quality + c5*Atmosphere + c6*Trends + c7*Food + c8*Professionalism
CocreationIntention ~ c9*France + c10*Assortment + c11*Aesthetic + c12*Quality + c13*Atmosphere + c14*Trends + c15*Food + c16*Professionalism
# Residual Covariances (Allowing correlations between endogenous variable errors)
# Residual Covariances (Allowing correlations between endogenous variable errors)
#Satisfaction ~~ AffectiveCommitment # Very important theoretically
# Residual Covariances (Allowing correlations between endogenous variable errors)
#Satisfaction ~~ AffectiveCommitment # Very important theoretically
#RepurchaseIntention ~~ CocreationIntention # Likely outcomes share error variance
# Indirect Effects for Mediation Testing
# Indirect Effects for Mediation Testing
# Format: effect_name := path1_label * path2_label
# Repurchase Intention:
# Repurchase Intention:
France_SAT_RI := a1 * b1
Assortment_SAT_RI := a2 * b1
Aesthetic_SAT_RI := a3 * b1
Quality_SAT_RI := a4 * b1
Atmosphere_SAT_RI := a5 * b1
Trends_SAT_RI := a6 * b1
Food_SAT_RI := a7 * b1
Professionalism_SAT_RI := a8 * b1
France_AC_RI := a9 * b2
Assortment_AC_RI := a10 * b2
Aesthetic_AC_RI := a11 * b2
Quality_AC_RI := a12 * b2
Atmosphere_AC_RI := a13 * b2
Trends_AC_RI := a14 * b2
Food_AC_RI := a15 * b2
Professionalism_AC_RI := a16 * b2
# Cocreation Intention:
# Cocreation Intention:
France_SAT_CI := a1 * b3
Assortment_SAT_CI := a2 * b3
Aesthetic_SAT_CI := a3 * b3
Quality_SAT_CI := a4 * b3
Atmosphere_SAT_CI := a5 * b3
Trends_SAT_CI := a6 * b3
Food_SAT_CI := a7 * b3
Professionalism_SAT_CI := a8 * b3
France_AC_CI := a9 * b4
Assortment_AC_CI := a10 * b4
Aesthetic_AC_CI := a11 * b4
Quality_AC_CI := a12 * b4
Atmosphere_AC_CI := a13 * b4
Trends_AC_CI := a14 * b4
Food_AC_CI := a15 * b4
Professionalism_AC_CI := a16 * b4
# Total Effects (Direct + Indirect)
# Total Effects (Direct + Indirect)
France_Total_RI := c1 + (a1*b1) + (a9*b2)
Assortment_Total_RI := c2 + (a2*b1) + (a10*b2)
Aesthetic_Total_RI := c3 + (a3*b1) + (a11*b2)
Quality_Total_RI := c4 + (a4*b1) + (a12*b2)
Atmosphere_Total_RI := c5 + (a5*b1) + (a13*b2)
Trends_Total_RI := c6 + (a6*b1) + (a14*b2)
Food_Total_RI := c7 + (a7*b1) + (a15*b2)
Professionalism_Total_RI := c8 + (a8*b1) + (a16*b2)
France_Total_CI := c9 + (a1*b3) + (a9*b4)
Assortment_Total_CI := c10 + (a2*b3) + (a10*b4)
Aesthetic_Total_CI := c11 + (a3*b3) + (a11*b4)
Quality_Total_CI := c12 + (a4*b3) + (a12*b4)
Atmosphere_Total_CI := c13 + (a5*b3) + (a13*b4)
Trends_Total_CI := c14 + (a6*b3) + (a14*b4)
Food_Total_CI := c15 + (a7*b3) + (a15*b4)
Professionalism_Total_CI := c16 + (a8*b3) + (a16*b4)
'
# Fit the SEM model
# Use bootstrapping for reliable indirect effect CIs
fit_sem <- cfa(sem_model, data = Data, missing = "ML", se = "bootstrap", bootstrap = 1000) # Use 1000 or more bootstraps
View(Data)
# Fit the SEM model
# Use bootstrapping for reliable indirect effect CIs
fit_sem <- cfa(sem_model, data = Data, missing = "ML", se = "bootstrap", bootstrap = 1000) # Use 1000 or more bootstraps
# Fit the SEM model
# Use bootstrapping for reliable indirect effect CIs
fit_sem <- cfa(sem_model, data = Data, missing = "ML", se = "bootstrap", bootstrap = 10000) # Use 1000 or more bootstraps
sem_model <- '
# Measurement Model (Loadings -  Validated)
# Measurement Model (Loadings -  Validated)
France =~ Im6 + Im7
Assortment =~ Im1 + Im2
Aesthetic =~ Im3 + Im4 + Im5
Quality =~ Im11 + Im12 + Im13
Atmosphere =~ Im20 + Im21 + Im22
Trends =~ Im17 + Im18
Food =~ Im10 + Im14
Professionalism =~ Im16 + Im19
Satisfaction =~ SAT_1 + SAT_2 + SAT_3                    #added accordingly to the task
AffectiveCommitment =~ COM_A1 + COM_A2 + COM_A3 + COM_A4
RepurchaseIntention =~ C_REP1 + C_REP2 + C_REP3
CocreationIntention =~ C_CR1 + C_CR3 + C_CR4 # Assuming C_CR2 might be dropped
# Structural Model (Regressions)
# Structural Model (Regressions)
# Predicting Mediators (SAT and AC) from Image Factors (Paths a)
# Structural Model (Regressions)
# Predicting Mediators (SAT and AC) from Image Factors (Paths a)
Satisfaction ~ a1*France + a2*Assortment + a3*Aesthetic + a4*Quality + a5*Atmosphere + a6*Trends + a7*Food + a8*Professionalism
AffectiveCommitment ~ a9*France + a10*Assortment + a11*Aesthetic + a12*Quality + a13*Atmosphere + a14*Trends + a15*Food + a16*Professionalism
# Predicting Outcomes from Mediators (Paths b)
# Predicting Outcomes from Mediators (Paths b)
RepurchaseIntention ~ b1*Satisfaction + b2*AffectiveCommitment
CocreationIntention ~ b3*Satisfaction + b4*AffectiveCommitment
# Direct Effects from Image Factors to Outcomes (Paths c)
# Direct Effects from Image Factors to Outcomes (Paths c)
RepurchaseIntention ~ c1*France + c2*Assortment + c3*Aesthetic + c4*Quality + c5*Atmosphere + c6*Trends + c7*Food + c8*Professionalism
CocreationIntention ~ c9*France + c10*Assortment + c11*Aesthetic + c12*Quality + c13*Atmosphere + c14*Trends + c15*Food + c16*Professionalism
# Residual Covariances (Allowing correlations between endogenous variable errors)
# Residual Covariances (Allowing correlations between endogenous variable errors)
#Satisfaction ~~ AffectiveCommitment # Very important theoretically
# Residual Covariances (Allowing correlations between endogenous variable errors)
#Satisfaction ~~ AffectiveCommitment # Very important theoretically
#RepurchaseIntention ~~ CocreationIntention # Likely outcomes share error variance
# Indirect Effects for Mediation Testing
# Indirect Effects for Mediation Testing
# Format: effect_name := path1_label * path2_label
# Repurchase Intention:
# Repurchase Intention:
France_SAT_RI := a1 * b1
Assortment_SAT_RI := a2 * b1
Aesthetic_SAT_RI := a3 * b1
Quality_SAT_RI := a4 * b1
Atmosphere_SAT_RI := a5 * b1
Trends_SAT_RI := a6 * b1
Food_SAT_RI := a7 * b1
Professionalism_SAT_RI := a8 * b1
France_AC_RI := a9 * b2
Assortment_AC_RI := a10 * b2
Aesthetic_AC_RI := a11 * b2
Quality_AC_RI := a12 * b2
Atmosphere_AC_RI := a13 * b2
Trends_AC_RI := a14 * b2
Food_AC_RI := a15 * b2
Professionalism_AC_RI := a16 * b2
# Cocreation Intention:
# Cocreation Intention:
France_SAT_CI := a1 * b3
Assortment_SAT_CI := a2 * b3
Aesthetic_SAT_CI := a3 * b3
Quality_SAT_CI := a4 * b3
Atmosphere_SAT_CI := a5 * b3
Trends_SAT_CI := a6 * b3
Food_SAT_CI := a7 * b3
Professionalism_SAT_CI := a8 * b3
France_AC_CI := a9 * b4
Assortment_AC_CI := a10 * b4
Aesthetic_AC_CI := a11 * b4
Quality_AC_CI := a12 * b4
Atmosphere_AC_CI := a13 * b4
Trends_AC_CI := a14 * b4
Food_AC_CI := a15 * b4
Professionalism_AC_CI := a16 * b4
# Total Effects (Direct + Indirect)
# Total Effects (Direct + Indirect)
France_Total_RI := c1 + (a1*b1) + (a9*b2)
Assortment_Total_RI := c2 + (a2*b1) + (a10*b2)
Aesthetic_Total_RI := c3 + (a3*b1) + (a11*b2)
Quality_Total_RI := c4 + (a4*b1) + (a12*b2)
Atmosphere_Total_RI := c5 + (a5*b1) + (a13*b2)
Trends_Total_RI := c6 + (a6*b1) + (a14*b2)
Food_Total_RI := c7 + (a7*b1) + (a15*b2)
Professionalism_Total_RI := c8 + (a8*b1) + (a16*b2)
France_Total_CI := c9 + (a1*b3) + (a9*b4)
Assortment_Total_CI := c10 + (a2*b3) + (a10*b4)
Aesthetic_Total_CI := c11 + (a3*b3) + (a11*b4)
Quality_Total_CI := c12 + (a4*b3) + (a12*b4)
Atmosphere_Total_CI := c13 + (a5*b3) + (a13*b4)
Trends_Total_CI := c14 + (a6*b3) + (a14*b4)
Food_Total_CI := c15 + (a7*b3) + (a15*b4)
Professionalism_Total_CI := c16 + (a8*b3) + (a16*b4)
'
# Fit the SEM model
# Use bootstrapping for reliable indirect effect CIs
fit_sem <- cfa(sem_model, data = Data, missing = "ML", se = "bootstrap", bootstrap = 1000) # Use 1000 or more bootstraps
